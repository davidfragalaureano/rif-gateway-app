/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace TropykusBorrowingService {
  export type TropykusContractsStruct = {
    comptroller: PromiseOrValue<string>;
    oracle: PromiseOrValue<string>;
    crbtc: PromiseOrValue<string>;
    cdoc: PromiseOrValue<string>;
  };

  export type TropykusContractsStructOutput = [
    string,
    string,
    string,
    string
  ] & { comptroller: string; oracle: string; crbtc: string; cdoc: string };
}

export declare namespace BorrowService {
  export type BorrowServiceListingStruct = {
    minAmount: PromiseOrValue<BigNumberish>;
    maxAmount: PromiseOrValue<BigNumberish>;
    maxDuration: PromiseOrValue<BigNumberish>;
    interestRate: PromiseOrValue<BigNumberish>;
    loanToValue: PromiseOrValue<BigNumberish>;
    loanToValueTokenAddr: PromiseOrValue<string>;
    currency: PromiseOrValue<string>;
  };

  export type BorrowServiceListingStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    minAmount: BigNumber;
    maxAmount: BigNumber;
    maxDuration: BigNumber;
    interestRate: BigNumber;
    loanToValue: BigNumber;
    loanToValueTokenAddr: string;
    currency: string;
  };
}

export interface $TropykusBorrowingServiceInterface extends utils.Interface {
  functions: {
    "$_checkOwner()": FunctionFragment;
    "$_msgData()": FunctionFragment;
    "$_msgSender()": FunctionFragment;
    "$_removeLiquidityInternal(uint256,address,uint256)": FunctionFragment;
    "$_transferOwnership(address)": FunctionFragment;
    "addLiquidity(uint256,address,uint256)": FunctionFragment;
    "addListing((uint256,uint256,uint256,uint256,uint256,address,address))": FunctionFragment;
    "borrow(uint256,address,uint256,uint256)": FunctionFragment;
    "calculateAmountToLend(uint256)": FunctionFragment;
    "createIdentity()": FunctionFragment;
    "currentLiquidity(address,uint256)": FunctionFragment;
    "debtBalance()": FunctionFragment;
    "getLendBalance()": FunctionFragment;
    "getListing(address,uint256)": FunctionFragment;
    "getListingsCount(address)": FunctionFragment;
    "listings(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pay(uint256,address,uint256)": FunctionFragment;
    "removeLiquidity(uint256,address,uint256)": FunctionFragment;
    "removeListing(uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "serviceType()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "$_checkOwner"
      | "$_msgData"
      | "$_msgSender"
      | "$_removeLiquidityInternal"
      | "$_transferOwnership"
      | "addLiquidity"
      | "addListing"
      | "borrow"
      | "calculateAmountToLend"
      | "createIdentity"
      | "currentLiquidity"
      | "debtBalance"
      | "getLendBalance"
      | "getListing"
      | "getListingsCount"
      | "listings"
      | "owner"
      | "pay"
      | "removeLiquidity"
      | "removeListing"
      | "renounceOwnership"
      | "serviceType"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "$_checkOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "$_msgData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "$_msgSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "$_removeLiquidityInternal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "$_transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addListing",
    values: [BorrowService.BorrowServiceListingStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAmountToLend",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createIdentity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentLiquidity",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "debtBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getListingsCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeListing",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "serviceType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "$_checkOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "$_msgData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "$_msgSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "$_removeLiquidityInternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "$_transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addListing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateAmountToLend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getListingsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serviceType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Borrow(uint256,address,address,uint256,uint256)": EventFragment;
    "ListingCreated(uint256,address,uint256)": EventFragment;
    "ListingRemoved(uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Pay(uint256,address,address,uint256)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListingCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListingRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface BorrowEventObject {
  index: BigNumber;
  borrower: string;
  currency: string;
  amount: BigNumber;
  duration: BigNumber;
}
export type BorrowEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  BorrowEventObject
>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface ListingCreatedEventObject {
  index: BigNumber;
  currency: string;
  interestRate: BigNumber;
}
export type ListingCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  ListingCreatedEventObject
>;

export type ListingCreatedEventFilter = TypedEventFilter<ListingCreatedEvent>;

export interface ListingRemovedEventObject {
  index: BigNumber;
  currency: string;
}
export type ListingRemovedEvent = TypedEvent<
  [BigNumber, string],
  ListingRemovedEventObject
>;

export type ListingRemovedEventFilter = TypedEventFilter<ListingRemovedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PayEventObject {
  index: BigNumber;
  borrower: string;
  currency: string;
  amount: BigNumber;
}
export type PayEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  PayEventObject
>;

export type PayEventFilter = TypedEventFilter<PayEvent>;

export interface WithdrawEventObject {
  withdrawer: string;
  currency: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface $TropykusBorrowingService extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: $TropykusBorrowingServiceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    $_checkOwner(overrides?: CallOverrides): Promise<[void]>;

    $_msgData(overrides?: CallOverrides): Promise<[string]>;

    $_msgSender(overrides?: CallOverrides): Promise<[string]>;

    $_removeLiquidityInternal(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    $_transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addLiquidity(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addListing(
      listing: BorrowService.BorrowServiceListingStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateAmountToLend(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createIdentity(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentLiquidity(
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>;

    debtBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLendBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getListing(
      currency: PromiseOrValue<string>,
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BorrowService.BorrowServiceListingStructOutput] & {
        listing: BorrowService.BorrowServiceListingStructOutput;
      }
    >;

    getListingsCount(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    listings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        minAmount: BigNumber;
        maxAmount: BigNumber;
        maxDuration: BigNumber;
        interestRate: BigNumber;
        loanToValue: BigNumber;
        loanToValueTokenAddr: string;
        currency: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pay(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeListing(
      index: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    serviceType(overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  $_checkOwner(overrides?: CallOverrides): Promise<void>;

  $_msgData(overrides?: CallOverrides): Promise<string>;

  $_msgSender(overrides?: CallOverrides): Promise<string>;

  $_removeLiquidityInternal(
    amount: PromiseOrValue<BigNumberish>,
    currency: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  $_transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addLiquidity(
    amount: PromiseOrValue<BigNumberish>,
    currency: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addListing(
    listing: BorrowService.BorrowServiceListingStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  borrow(
    amount: PromiseOrValue<BigNumberish>,
    currency: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateAmountToLend(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createIdentity(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentLiquidity(
    currency: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  debtBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getLendBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getListing(
    currency: PromiseOrValue<string>,
    listingId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BorrowService.BorrowServiceListingStructOutput>;

  getListingsCount(
    currency: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  listings(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string, string] & {
      minAmount: BigNumber;
      maxAmount: BigNumber;
      maxDuration: BigNumber;
      interestRate: BigNumber;
      loanToValue: BigNumber;
      loanToValueTokenAddr: string;
      currency: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pay(
    amount: PromiseOrValue<BigNumberish>,
    currency: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    amount: PromiseOrValue<BigNumberish>,
    currency: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeListing(
    index: PromiseOrValue<BigNumberish>,
    currency: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  serviceType(overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    $_checkOwner(overrides?: CallOverrides): Promise<void>;

    $_msgData(overrides?: CallOverrides): Promise<string>;

    $_msgSender(overrides?: CallOverrides): Promise<string>;

    $_removeLiquidityInternal(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    $_transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidity(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addListing(
      listing: BorrowService.BorrowServiceListingStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateAmountToLend(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createIdentity(overrides?: CallOverrides): Promise<void>;

    currentLiquidity(
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getLendBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getListing(
      currency: PromiseOrValue<string>,
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BorrowService.BorrowServiceListingStructOutput>;

    getListingsCount(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        minAmount: BigNumber;
        maxAmount: BigNumber;
        maxDuration: BigNumber;
        interestRate: BigNumber;
        loanToValue: BigNumber;
        loanToValueTokenAddr: string;
        currency: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pay(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidity(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeListing(
      index: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    serviceType(overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Borrow(uint256,address,address,uint256,uint256)"(
      index?: PromiseOrValue<BigNumberish> | null,
      borrower?: PromiseOrValue<string> | null,
      currency?: PromiseOrValue<string> | null,
      amount?: null,
      duration?: null
    ): BorrowEventFilter;
    Borrow(
      index?: PromiseOrValue<BigNumberish> | null,
      borrower?: PromiseOrValue<string> | null,
      currency?: PromiseOrValue<string> | null,
      amount?: null,
      duration?: null
    ): BorrowEventFilter;

    "ListingCreated(uint256,address,uint256)"(
      index?: PromiseOrValue<BigNumberish> | null,
      currency?: PromiseOrValue<string> | null,
      interestRate?: PromiseOrValue<BigNumberish> | null
    ): ListingCreatedEventFilter;
    ListingCreated(
      index?: PromiseOrValue<BigNumberish> | null,
      currency?: PromiseOrValue<string> | null,
      interestRate?: PromiseOrValue<BigNumberish> | null
    ): ListingCreatedEventFilter;

    "ListingRemoved(uint256,address)"(
      index?: PromiseOrValue<BigNumberish> | null,
      currency?: PromiseOrValue<string> | null
    ): ListingRemovedEventFilter;
    ListingRemoved(
      index?: PromiseOrValue<BigNumberish> | null,
      currency?: PromiseOrValue<string> | null
    ): ListingRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Pay(uint256,address,address,uint256)"(
      index?: PromiseOrValue<BigNumberish> | null,
      borrower?: PromiseOrValue<string> | null,
      currency?: PromiseOrValue<string> | null,
      amount?: null
    ): PayEventFilter;
    Pay(
      index?: PromiseOrValue<BigNumberish> | null,
      borrower?: PromiseOrValue<string> | null,
      currency?: PromiseOrValue<string> | null,
      amount?: null
    ): PayEventFilter;

    "Withdraw(address,address,uint256)"(
      withdrawer?: PromiseOrValue<string> | null,
      currency?: null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      withdrawer?: PromiseOrValue<string> | null,
      currency?: null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    $_checkOwner(overrides?: CallOverrides): Promise<BigNumber>;

    $_msgData(overrides?: CallOverrides): Promise<BigNumber>;

    $_msgSender(overrides?: CallOverrides): Promise<BigNumber>;

    $_removeLiquidityInternal(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    $_transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addLiquidity(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addListing(
      listing: BorrowService.BorrowServiceListingStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateAmountToLend(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createIdentity(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentLiquidity(
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getLendBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getListing(
      currency: PromiseOrValue<string>,
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getListingsCount(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pay(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeListing(
      index: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    serviceType(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    $_checkOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    $_msgData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    $_msgSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    $_removeLiquidityInternal(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    $_transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addListing(
      listing: BorrowService.BorrowServiceListingStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateAmountToLend(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createIdentity(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentLiquidity(
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLendBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getListing(
      currency: PromiseOrValue<string>,
      listingId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getListingsCount(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pay(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      amount: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeListing(
      index: PromiseOrValue<BigNumberish>,
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    serviceType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
