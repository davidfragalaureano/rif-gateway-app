/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface $UserIdentityInterface extends utils.Interface {
  functions: {
    "read(address,bytes)": FunctionFragment;
    "retrieve(address,bytes)": FunctionFragment;
    "send(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "read" | "retrieve" | "send"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "read",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieve",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "read", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "retrieve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;

  events: {
    "ReceivedLiquidity(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReceivedLiquidity"): EventFragment;
}

export interface ReceivedLiquidityEventObject {
  _from: string;
  _amount: BigNumber;
}
export type ReceivedLiquidityEvent = TypedEvent<
  [string, BigNumber],
  ReceivedLiquidityEventObject
>;

export type ReceivedLiquidityEventFilter =
  TypedEventFilter<ReceivedLiquidityEvent>;

export interface $UserIdentity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: $UserIdentityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    read(
      contractToCall: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    retrieve(
      contractToCall: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    send(
      contractToCall: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  read(
    contractToCall: PromiseOrValue<string>,
    functionToCall: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  retrieve(
    contractToCall: PromiseOrValue<string>,
    functionToCall: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  send(
    contractToCall: PromiseOrValue<string>,
    functionToCall: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    read(
      contractToCall: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    retrieve(
      contractToCall: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    send(
      contractToCall: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ReceivedLiquidity(address,uint256)"(
      _from?: null,
      _amount?: null
    ): ReceivedLiquidityEventFilter;
    ReceivedLiquidity(
      _from?: null,
      _amount?: null
    ): ReceivedLiquidityEventFilter;
  };

  estimateGas: {
    read(
      contractToCall: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    retrieve(
      contractToCall: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    send(
      contractToCall: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    read(
      contractToCall: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    retrieve(
      contractToCall: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    send(
      contractToCall: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
