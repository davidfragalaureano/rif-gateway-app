/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface $UserIdentityInterface extends utils.Interface {
  functions: {
    "read(address,bytes)": FunctionFragment;
    "retrieve(address,bytes)": FunctionFragment;
    "retrieveTokens(address,bytes,address)": FunctionFragment;
    "send(address,bytes)": FunctionFragment;
    "sendTokens(address,bytes,address,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "read"
      | "retrieve"
      | "retrieveTokens"
      | "send"
      | "sendTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "read",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieve",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "read", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "retrieve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retrieveTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendTokens", data: BytesLike): Result;

  events: {
    "LiquidityReceived(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidityReceived"): EventFragment;
}

export interface LiquidityReceivedEventObject {
  from: string;
  amount: BigNumber;
}
export type LiquidityReceivedEvent = TypedEvent<
  [string, BigNumber],
  LiquidityReceivedEventObject
>;

export type LiquidityReceivedEventFilter =
  TypedEventFilter<LiquidityReceivedEvent>;

export interface $UserIdentity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: $UserIdentityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    read(
      targetContract: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    retrieve(
      targetContract: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retrieveTokens(
      targetContract: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    send(
      targetContract: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendTokens(
      targetContract: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      kToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  read(
    targetContract: PromiseOrValue<string>,
    functionToCall: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  retrieve(
    targetContract: PromiseOrValue<string>,
    functionToCall: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retrieveTokens(
    targetContract: PromiseOrValue<string>,
    functionToCall: PromiseOrValue<BytesLike>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  send(
    targetContract: PromiseOrValue<string>,
    functionToCall: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendTokens(
    targetContract: PromiseOrValue<string>,
    functionToCall: PromiseOrValue<BytesLike>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    kToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    read(
      targetContract: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    retrieve(
      targetContract: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    retrieveTokens(
      targetContract: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    send(
      targetContract: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sendTokens(
      targetContract: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      kToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "LiquidityReceived(address,uint256)"(
      from?: null,
      amount?: null
    ): LiquidityReceivedEventFilter;
    LiquidityReceived(from?: null, amount?: null): LiquidityReceivedEventFilter;
  };

  estimateGas: {
    read(
      targetContract: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    retrieve(
      targetContract: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retrieveTokens(
      targetContract: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    send(
      targetContract: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendTokens(
      targetContract: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      kToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    read(
      targetContract: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    retrieve(
      targetContract: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retrieveTokens(
      targetContract: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    send(
      targetContract: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendTokens(
      targetContract: PromiseOrValue<string>,
      functionToCall: PromiseOrValue<BytesLike>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      kToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
