/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  $RIFGateway,
  $RIFGatewayInterface,
} from "../../../contracts-exposed/RIFGateway.sol/$RIFGateway";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "$_bar",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "__hh_exposed_bytecode_marker",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "foo",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040526e1a185c991a185d0b595e1c1bdcd959608a1b60005534801561002657600080fd5b5061019e806100366000396000f3fe6080604052600436106100385760003560e01c8063209d400414610044578063342db7391461006f578063c29855781461009357600080fd5b3661003f57005b600080fd5b34801561005057600080fd5b506100596100d9565b604051610066919061011a565b60405180910390f35b34801561007b57600080fd5b5061008560005481565b604051908152602001610066565b34801561009f57600080fd5b5060408051808201909152600381527f62617200000000000000000000000000000000000000000000000000000000006020820152610059565b606061011560408051808201909152600381527f62617a0000000000000000000000000000000000000000000000000000000000602082015290565b905090565b600060208083528351808285015260005b818110156101475785810183015185820160400152820161012b565b506000604082860101526040601f19601f830116850101925050509291505056fea264697066735822122050abaa28b1ea728788cdb8d907633bbb61e86cb7abab1aab334c68aa60e0636364736f6c63430008100033";

type $RIFGatewayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: $RIFGatewayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class $RIFGateway__factory extends ContractFactory {
  constructor(...args: $RIFGatewayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<$RIFGateway> {
    return super.deploy(overrides || {}) as Promise<$RIFGateway>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): $RIFGateway {
    return super.attach(address) as $RIFGateway;
  }
  override connect(signer: Signer): $RIFGateway__factory {
    return super.connect(signer) as $RIFGateway__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): $RIFGatewayInterface {
    return new utils.Interface(_abi) as $RIFGatewayInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): $RIFGateway {
    return new Contract(address, _abi, signerOrProvider) as $RIFGateway;
  }
}
