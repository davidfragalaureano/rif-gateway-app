/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  $FeeManager,
  $FeeManagerInterface,
} from "../../../../contracts-exposed/feeManager/FeeManager.sol/$FeeManager";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InsufficientFunds",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "RBTCTransferFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "payer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "payee",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "arg0",
        type: "address",
      },
    ],
    name: "$_beneficiares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "__hh_exposed_bytecode_marker",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
    ],
    name: "fundBeneficiary",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
    ],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040526e1a185c991a185d0b595e1c1bdcd959608a1b60015534801561002657600080fd5b506103ca806100366000396000f3fe60806040526004361061005d5760003560e01c8063342db73911610043578063342db7391461009e578063de305a88146100c6578063f8b2cb4f146100c657600080fd5b8062a4e863146100695780632e1a7d4d1461007e57600080fd5b3661006457005b600080fd5b61007c6100773660046102e3565b610109565b005b34801561008a57600080fd5b5061007c610099366004610320565b6101c3565b3480156100aa57600080fd5b506100b460015481565b60405190815260200160405180910390f35b3480156100d257600080fd5b506100b46100e13660046102e3565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b34600003610143576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526020819052604081208054349290610178908490610368565b9091555050604051349073ffffffffffffffffffffffffffffffffffffffff8316907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c90600090a350565b3360009081526020819052604090205481111561020c576040517f356680b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152602081905260408120805483929061022b908490610381565b9091555050604051600090339083908381818185875af1925050503d8060008114610272576040519150601f19603f3d011682016040523d82523d6000602084013e610277565b606091505b50509050806102b2576040517f5b8688af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051829033907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436490600090a35050565b6000602082840312156102f557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461031957600080fd5b9392505050565b60006020828403121561033257600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561037b5761037b610339565b92915050565b8181038181111561037b5761037b61033956fea264697066735822122019deac0bd011a0cd643a56b633ebd03a9929ae61425a380b10ddac8bb118e23164736f6c63430008100033";

type $FeeManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: $FeeManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class $FeeManager__factory extends ContractFactory {
  constructor(...args: $FeeManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<$FeeManager> {
    return super.deploy(overrides || {}) as Promise<$FeeManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): $FeeManager {
    return super.attach(address) as $FeeManager;
  }
  override connect(signer: Signer): $FeeManager__factory {
    return super.connect(signer) as $FeeManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): $FeeManagerInterface {
    return new utils.Interface(_abi) as $FeeManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): $FeeManager {
    return new Contract(address, _abi, signerOrProvider) as $FeeManager;
  }
}
