/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  $ServiceTypeManager,
  $ServiceTypeManagerInterface,
} from "../../../../contracts-exposed/services/ServiceTypeManager.sol/$ServiceTypeManager";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "$_checkOwner",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "$_msgData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "$_msgSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "$_registerInterface",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "$_transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "__hh_exposed_bytecode_marker",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "newServiceInterfaceId",
        type: "bytes4",
      },
    ],
    name: "addServiceType",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040526e1a185c991a185d0b595e1c1bdcd959608a1b60035534801561002657600080fd5b5061003033610035565b610085565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105e5806100946000396000f3fe6080604052600436106100c05760003560e01c80634dac7f8911610074578063ebcca7071161004e578063ebcca707146101e3578063f2fde38b146101f8578063fe1c9a241461021857600080fd5b80634dac7f8914610190578063715018a6146101b05780638da5cb5b146101c557600080fd5b80632904df29116100a55780632904df291461012357806332cadf3c1461014a578063342db7391461016c57600080fd5b806301ffc9a7146100cc5780631cade5a91461010157600080fd5b366100c757005b600080fd5b3480156100d857600080fd5b506100ec6100e7366004610507565b610238565b60405190151581526020015b60405180910390f35b34801561010d57600080fd5b5061012161011c366004610507565b61026d565b005b34801561012f57600080fd5b50335b6040516001600160a01b0390911681526020016100f8565b34801561015657600080fd5b5061015f610279565b6040516100f89190610538565b34801561017857600080fd5b5061018260035481565b6040519081526020016100f8565b34801561019c57600080fd5b506101216101ab366004610507565b6102b8565b3480156101bc57600080fd5b506101216102c0565b3480156101d157600080fd5b506000546001600160a01b0316610132565b3480156101ef57600080fd5b506101216102d4565b34801561020457600080fd5b50610121610213366004610586565b6102dc565b34801561022457600080fd5b50610121610233366004610586565b610365565b60006102438261036e565b8061026757506001600160e01b0319821660009081526002602052604090205460ff165b92915050565b610276816103c3565b50565b60606000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092949350505050565b61026d610445565b6102c8610445565b6102d2600061049f565b565b6102d2610445565b6102e4610445565b6001600160a01b0381166103655760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102768161049f565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614806102675750506001600160e01b03191660009081526001602052604090205460ff1690565b6001600160e01b0319808216900361041d5760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015260640161035c565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b6000546001600160a01b031633146102d25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161035c565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561051957600080fd5b81356001600160e01b03198116811461053157600080fd5b9392505050565b600060208083528351808285015260005b8181101561056557858101830151858201604001528201610549565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561059857600080fd5b81356001600160a01b038116811461053157600080fdfea2646970667358221220f5e426e4df3266cc76daae1cff04b1a2fd471c3e91a507cbf0f547ea22a9e74a64736f6c63430008100033";

type $ServiceTypeManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: $ServiceTypeManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class $ServiceTypeManager__factory extends ContractFactory {
  constructor(...args: $ServiceTypeManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<$ServiceTypeManager> {
    return super.deploy(overrides || {}) as Promise<$ServiceTypeManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): $ServiceTypeManager {
    return super.attach(address) as $ServiceTypeManager;
  }
  override connect(signer: Signer): $ServiceTypeManager__factory {
    return super.connect(signer) as $ServiceTypeManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): $ServiceTypeManagerInterface {
    return new utils.Interface(_abi) as $ServiceTypeManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): $ServiceTypeManager {
    return new Contract(address, _abi, signerOrProvider) as $ServiceTypeManager;
  }
}
