/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  $RSKAddrValidator,
  $RSKAddrValidatorInterface,
} from "../../../../contracts-exposed/smartwallet/RSKAddrValidator.sol/$RSKAddrValidator";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "$checkPKNotZero",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr1",
        type: "address",
      },
      {
        internalType: "address",
        name: "addr2",
        type: "address",
      },
    ],
    name: "$safeEquals",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "__hh_exposed_bytecode_marker",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040526e1a185c991a185d0b595e1c1bdcd959608a1b60005534801561002657600080fd5b50610211806100366000396000f3fe6080604052600436106100385760003560e01c8063271a419f14610044578063342db7391461007957806377815cbe1461009d57600080fd5b3661003f57005b600080fd5b34801561005057600080fd5b5061006461005f36600461018d565b6100bd565b60405190151581526020015b60405180910390f35b34801561008557600080fd5b5061008f60005481565b604051908152602001610070565b3480156100a957600080fd5b506100646100b83660046101a8565b6100ce565b60006100c8826100e1565b92915050565b60006100da838361011a565b9392505050565b600073dcc703c0e500b653ca82273b7bfad8045d85a4706001600160a01b038316148015906100c85750506001600160a01b0316151590565b6000816001600160a01b0316836001600160a01b031614801561015a575073dcc703c0e500b653ca82273b7bfad8045d85a4706001600160a01b03841614155b80156100da575050506001600160a01b0316151590565b80356001600160a01b038116811461018857600080fd5b919050565b60006020828403121561019f57600080fd5b6100da82610171565b600080604083850312156101bb57600080fd5b6101c483610171565b91506101d260208401610171565b9050925092905056fea2646970667358221220e78256e4735522d4238fd5e501992dc15a93e4d33c30985e7a46f095a8e93ac364736f6c63430008100033";

type $RSKAddrValidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: $RSKAddrValidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class $RSKAddrValidator__factory extends ContractFactory {
  constructor(...args: $RSKAddrValidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<$RSKAddrValidator> {
    return super.deploy(overrides || {}) as Promise<$RSKAddrValidator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): $RSKAddrValidator {
    return super.attach(address) as $RSKAddrValidator;
  }
  override connect(signer: Signer): $RSKAddrValidator__factory {
    return super.connect(signer) as $RSKAddrValidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): $RSKAddrValidatorInterface {
    return new utils.Interface(_abi) as $RSKAddrValidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): $RSKAddrValidator {
    return new Contract(address, _abi, signerOrProvider) as $RSKAddrValidator;
  }
}
