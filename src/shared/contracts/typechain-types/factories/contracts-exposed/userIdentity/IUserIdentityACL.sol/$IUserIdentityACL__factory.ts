/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  $IUserIdentityACL,
  $IUserIdentityACLInterface,
} from "../../../../contracts-exposed/userIdentity/IUserIdentityACL.sol/$IUserIdentityACL";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "serviceProvider",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approval",
        type: "bool",
      },
    ],
    name: "authorize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "isAllowedToExecuteCallFor",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "isAllowedToExecuteCallFor",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class $IUserIdentityACL__factory {
  static readonly abi = _abi;
  static createInterface(): $IUserIdentityACLInterface {
    return new utils.Interface(_abi) as $IUserIdentityACLInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): $IUserIdentityACL {
    return new Contract(address, _abi, signerOrProvider) as $IUserIdentityACL;
  }
}
