/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  $UserIdentityFactory,
  $UserIdentityFactoryInterface,
} from "../../../../contracts-exposed/userIdentity/UserIdentityFactory.sol/$UserIdentityFactory";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_caller",
        type: "address",
      },
    ],
    name: "CallerNotAllowed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "arg0",
        type: "address",
      },
      {
        internalType: "address",
        name: "arg1",
        type: "address",
      },
    ],
    name: "$_allowedContractCalls",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "serviceProvider",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approval",
        type: "bool",
      },
    ],
    name: "authorize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "createIdentity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getIdentity",
    outputs: [
      {
        internalType: "contract UserIdentity",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "isAllowedToExecuteCallFor",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610bc9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80632fea7b81116100505780632fea7b81146100fc5780635b2ab06c1461012757806379ee6b521461013a57600080fd5b80630ff51e991461006c5780632d1fb389146100b6575b600080fd5b6100a161007a366004610329565b6001600160a01b031660009081526020818152604080832033845290915290205460ff1690565b60405190151581526020015b60405180910390f35b6100fa6100c436600461034b565b336000908152602081815260408083206001600160a01b0395909516835293905291909120805460ff1916911515919091179055565b005b61010f61010a366004610329565b610174565b6040516001600160a01b0390911681526020016100ad565b6100fa610135366004610329565b6101f7565b6100a1610148366004610387565b6001600160a01b0391821660009081526020818152604080832093909416825291909152205460ff1690565b6000816001600160a01b03811633148015906101b257506001600160a01b03811660009081526020818152604080832033845290915290205460ff16155b156101d7576040516373aabd2960e11b81523360048201526024015b60405180910390fd5b50506001600160a01b039081166000908152600160205260409020541690565b806001600160a01b038116331480159061023357506001600160a01b03811660009081526020818152604080832033845290915290205460ff16155b15610253576040516373aabd2960e11b81523360048201526024016101ce565b6001600160a01b03828116600090815260016020526040902054166102fc57813060405161028090610300565b6001600160a01b03928316815291166020820152604001604051809103906000f0801580156102b3573d6000803e3d6000fd5b506001600160a01b03838116600090815260016020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016929091169190911790555b5050565b6107d9806103bb83390190565b80356001600160a01b038116811461032457600080fd5b919050565b60006020828403121561033b57600080fd5b6103448261030d565b9392505050565b6000806040838503121561035e57600080fd5b6103678361030d565b91506020830135801515811461037c57600080fd5b809150509250929050565b6000806040838503121561039a57600080fd5b6103a38361030d565b91506103b16020840161030d565b9050925092905056fe608060405234801561001057600080fd5b506040516107d93803806107d983398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b61071b806100be6000396000f3fe6080604052600436106100385760003560e01c8063621091c2146100ba578063c89acc86146100ef578063d79f44eb1461010257600080fd5b366100b557604080513381523460208201527fb9ef7b263042410762bbb04c33bb9e3a83fcd9350dbe829072c2a3df035923f2910160405180910390a16100b36040518060400160405280600b81526020017f7265636569766564206c6900000000000000000000000000000000000000000081525061012f565b005b600080fd5b3480156100c657600080fd5b506100da6100d53660046105c2565b6101a3565b60405190151581526020015b60405180910390f35b6100da6100fd3660046105c2565b61038e565b34801561010e57600080fd5b5061012261011d3660046105c2565b6104a5565b6040516100e69190610699565b6101a0816040516024016101439190610699565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f41304fac000000000000000000000000000000000000000000000000000000001790526105a1565b50565b60015460008054604051630ff51e9960e01b81526001600160a01b03918216600482015291921690630ff51e9990602401602060405180830381865afa1580156101f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021591906106b3565b1561023a576040516373aabd2960e11b81523360048201526024015b60405180910390fd5b600080856001600160a01b031685856040516102579291906106d5565b6000604051808303816000865af19150503d8060008114610294576040519150601f19603f3d011682016040523d82523d6000602084013e610299565b606091505b5091509150816102be5780604051636b167e4360e11b81526004016102319190610699565b4715610342576000805460405182916001600160a01b03169047908381818185875af1925050503d8060008114610311576040519150601f19603f3d011682016040523d82523d6000602084013e610316565b606091505b50915091508161033b5780604051636b167e4360e11b81526004016102319190610699565b5050610385565b6040517f1e16cb1b0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0387166024820152604401610231565b50949350505050565b60015460008054604051630ff51e9960e01b81526001600160a01b03918216600482015291921690630ff51e9990602401602060405180830381865afa1580156103dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040091906106b3565b15610420576040516373aabd2960e11b8152336004820152602401610231565b600080856001600160a01b031634868660405161043e9291906106d5565b60006040518083038185875af1925050503d806000811461047b576040519150601f19603f3d011682016040523d82523d6000602084013e610480565b606091505b5091509150816103855780604051636b167e4360e11b81526004016102319190610699565b600154600054604051630ff51e9960e01b81526001600160a01b0391821660048201526060929190911690630ff51e9990602401602060405180830381865afa1580156104f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051a91906106b3565b1561053a576040516373aabd2960e11b8152336004820152602401610231565b6000846001600160a01b031684846040516105569291906106d5565b600060405180830381855afa9150503d8060008114610591576040519150601f19603f3d011682016040523d82523d6000602084013e610596565b606091505b509695505050505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000806000604084860312156105d757600080fd5b83356001600160a01b03811681146105ee57600080fd5b9250602084013567ffffffffffffffff8082111561060b57600080fd5b818601915086601f83011261061f57600080fd5b81358181111561062e57600080fd5b87602082850101111561064057600080fd5b6020830194508093505050509250925092565b6000815180845260005b818110156106795760208185018101518683018201520161065d565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006106ac6020830184610653565b9392505050565b6000602082840312156106c557600080fd5b815180151581146106ac57600080fd5b818382376000910190815291905056fea264697066735822122049306790f1128e88473ff740c05008bcb2a4157153b9e72fb72975869e4af08864736f6c63430008100033a26469706673582212207d53c8aef33d9b1fef96bfa1d03f71a0546e3aa81e54fe6d09d7d2a53ae4f92364736f6c63430008100033";

type $UserIdentityFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: $UserIdentityFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class $UserIdentityFactory__factory extends ContractFactory {
  constructor(...args: $UserIdentityFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<$UserIdentityFactory> {
    return super.deploy(overrides || {}) as Promise<$UserIdentityFactory>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): $UserIdentityFactory {
    return super.attach(address) as $UserIdentityFactory;
  }
  override connect(signer: Signer): $UserIdentityFactory__factory {
    return super.connect(signer) as $UserIdentityFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): $UserIdentityFactoryInterface {
    return new utils.Interface(_abi) as $UserIdentityFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): $UserIdentityFactory {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as $UserIdentityFactory;
  }
}
