/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  RIFGateway,
  RIFGatewayInterface,
} from "../../contracts/RIFGateway";

const _abi = [
  {
    inputs: [],
    name: "foo",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610173806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c298557814610030575b600080fd5b61003861004e565b604051610045919061011b565b60405180910390f35b60606040518060400160405280600381526020017f6261720000000000000000000000000000000000000000000000000000000000815250905090565b600081519050919050565b600082825260208201905092915050565b60005b838110156100c55780820151818401526020810190506100aa565b60008484015250505050565b6000601f19601f8301169050919050565b60006100ed8261008b565b6100f78185610096565b93506101078185602086016100a7565b610110816100d1565b840191505092915050565b6000602082019050818103600083015261013581846100e2565b90509291505056fea264697066735822122047f90d32966a685bde4aca1c9e3598b5b5ac8ccb7ba9327c545372427113754864736f6c63430008100033";

type RIFGatewayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RIFGatewayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RIFGateway__factory extends ContractFactory {
  constructor(...args: RIFGatewayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RIFGateway> {
    return super.deploy(overrides || {}) as Promise<RIFGateway>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RIFGateway {
    return super.attach(address) as RIFGateway;
  }
  override connect(signer: Signer): RIFGateway__factory {
    return super.connect(signer) as RIFGateway__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RIFGatewayInterface {
    return new utils.Interface(_abi) as RIFGatewayInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RIFGateway {
    return new Contract(address, _abi, signerOrProvider) as RIFGateway;
  }
}
