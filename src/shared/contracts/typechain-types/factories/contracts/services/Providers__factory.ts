/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Providers,
  ProvidersInterface,
} from "../../../contracts/services/Providers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
    ],
    name: "InvalidProviderAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract Service",
        name: "service",
        type: "address",
      },
    ],
    name: "addService",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getServices",
    outputs: [
      {
        internalType: "contract Service[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
      {
        internalType: "contract Service",
        name: "service",
        type: "address",
      },
    ],
    name: "validate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610f978061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631cc0a470146100675780635372a9ce14610083578063715018a61461009f57806375417851146100a95780638da5cb5b146100c7578063f2fde38b146100e5575b600080fd5b610081600480360381019061007c9190610b11565b610101565b005b61009d60048036038101906100989190610b51565b610320565b005b6100a76105b8565b005b6100b16105cc565b6040516100be9190610c8c565b60405180910390f35b6100cf6107e7565b6040516100dc9190610cbd565b60405180910390f35b6100ff60048036038101906100fa9190610d04565b610810565b005b610109610893565b60008173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610156573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017a9190610d46565b9050821561031b57610212600380548060200260200160405190810160405280929190818152602001828054801561020757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116101bd575b505050505082610911565b61027a576003819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505050565b60008173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561036d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103919190610d46565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361040457806040517f59e3460e0000000000000000000000000000000000000000000000000000000081526004016103fb9190610cbd565b60405180910390fd5b610494600480548060200260200160405190810160405280929190818152602001828054801561048957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161043f575b505050505082610911565b6104fc576004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560008154809291906105af90610dac565b91905055505050565b6105c0610893565b6105ca6000610998565b565b6060600060055467ffffffffffffffff8111156105ec576105eb610df4565b5b60405190808252806020026020018201604052801561061a5781602001602082028036833780820191505090505b5090506000805b6003805490508110156107de576000600160006003848154811061064857610647610e23565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561072d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106e3575b5050505050905060005b81518110156107c95781818151811061075357610752610e23565b5b602002602001015185858151811061076e5761076d610e23565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505083806107b390610dac565b94505080806107c190610dac565b915050610737565b505080806107d690610dac565b915050610621565b50819250505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610818610893565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087e90610ed5565b60405180910390fd5b61089081610998565b50565b61089b610a5c565b73ffffffffffffffffffffffffffffffffffffffff166108b96107e7565b73ffffffffffffffffffffffffffffffffffffffff161461090f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090690610f41565b60405180910390fd5b565b600080600090505b835181101561098c578273ffffffffffffffffffffffffffffffffffffffff1684828151811061094c5761094b610e23565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603610979576001915050610992565b808061098490610dac565b915050610919565b50600090505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b60008115159050919050565b610a7e81610a69565b8114610a8957600080fd5b50565b600081359050610a9b81610a75565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610acc82610aa1565b9050919050565b6000610ade82610ac1565b9050919050565b610aee81610ad3565b8114610af957600080fd5b50565b600081359050610b0b81610ae5565b92915050565b60008060408385031215610b2857610b27610a64565b5b6000610b3685828601610a8c565b9250506020610b4785828601610afc565b9150509250929050565b600060208284031215610b6757610b66610a64565b5b6000610b7584828501610afc565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6000610bcf610bca610bc584610aa1565b610baa565b610aa1565b9050919050565b6000610be182610bb4565b9050919050565b6000610bf382610bd6565b9050919050565b610c0381610be8565b82525050565b6000610c158383610bfa565b60208301905092915050565b6000602082019050919050565b6000610c3982610b7e565b610c438185610b89565b9350610c4e83610b9a565b8060005b83811015610c7f578151610c668882610c09565b9750610c7183610c21565b925050600181019050610c52565b5085935050505092915050565b60006020820190508181036000830152610ca68184610c2e565b905092915050565b610cb781610ac1565b82525050565b6000602082019050610cd26000830184610cae565b92915050565b610ce181610ac1565b8114610cec57600080fd5b50565b600081359050610cfe81610cd8565b92915050565b600060208284031215610d1a57610d19610a64565b5b6000610d2884828501610cef565b91505092915050565b600081519050610d4081610cd8565b92915050565b600060208284031215610d5c57610d5b610a64565b5b6000610d6a84828501610d31565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000610db782610da2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610de957610de8610d73565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610ebf602683610e52565b9150610eca82610e63565b604082019050919050565b60006020820190508181036000830152610eee81610eb2565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610f2b602083610e52565b9150610f3682610ef5565b602082019050919050565b60006020820190508181036000830152610f5a81610f1e565b905091905056fea2646970667358221220e478650aac19b7b8a6d424f70c8f15cfa6c878a34cae693ac41f57b4ff478f2f64736f6c63430008100033";

type ProvidersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProvidersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Providers__factory extends ContractFactory {
  constructor(...args: ProvidersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Providers> {
    return super.deploy(overrides || {}) as Promise<Providers>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Providers {
    return super.attach(address) as Providers;
  }
  override connect(signer: Signer): Providers__factory {
    return super.connect(signer) as Providers__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProvidersInterface {
    return new utils.Interface(_abi) as ProvidersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Providers {
    return new Contract(address, _abi, signerOrProvider) as Providers;
  }
}
