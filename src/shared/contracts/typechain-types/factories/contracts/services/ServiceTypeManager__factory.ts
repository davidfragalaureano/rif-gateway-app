/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ServiceTypeManager,
  ServiceTypeManagerInterface,
} from "../../../contracts/services/ServiceTypeManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "newServiceInterfaceId",
        type: "bytes4",
      },
    ],
    name: "addServiceType",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6103f78061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063715018a611610050578063715018a6146100a95780638da5cb5b146100b1578063f2fde38b146100cc57600080fd5b806301ffc9a71461006c5780634dac7f8914610094575b600080fd5b61007f61007a366004610367565b6100df565b60405190151581526020015b60405180910390f35b6100a76100a2366004610367565b610114565b005b6100a7610128565b6000546040516001600160a01b03909116815260200161008b565b6100a76100da366004610398565b61013c565b60006100ea826101ce565b8061010e57506001600160e01b0319821660009081526002602052604090205460ff165b92915050565b61011c610223565b6101258161027d565b50565b610130610223565b61013a60006102ff565b565b610144610223565b6001600160a01b0381166101c55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610125816102ff565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316148061010e5750506001600160e01b03191660009081526001602052604090205460ff1690565b6000546001600160a01b0316331461013a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101bc565b6001600160e01b031980821690036102d75760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e746572666163652069640000000060448201526064016101bc565b6001600160e01b0319166000908152600160208190526040909120805460ff19169091179055565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561037957600080fd5b81356001600160e01b03198116811461039157600080fd5b9392505050565b6000602082840312156103aa57600080fd5b81356001600160a01b038116811461039157600080fdfea264697066735822122059edf9be3e86755e287792b163b63548c4501338727bee8849b26e0884b0746c64736f6c63430008100033";

type ServiceTypeManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ServiceTypeManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ServiceTypeManager__factory extends ContractFactory {
  constructor(...args: ServiceTypeManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ServiceTypeManager> {
    return super.deploy(overrides || {}) as Promise<ServiceTypeManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ServiceTypeManager {
    return super.attach(address) as ServiceTypeManager;
  }
  override connect(signer: Signer): ServiceTypeManager__factory {
    return super.connect(signer) as ServiceTypeManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ServiceTypeManagerInterface {
    return new utils.Interface(_abi) as ServiceTypeManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ServiceTypeManager {
    return new Contract(address, _abi, signerOrProvider) as ServiceTypeManager;
  }
}
