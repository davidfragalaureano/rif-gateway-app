/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  UserIdentityACL,
  UserIdentityACLInterface,
} from "../../../contracts/userIdentity/UserIdentityACL";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "CallerNotAllowed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "serviceProvider",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approval",
        type: "bool",
      },
    ],
    name: "authorize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "isAllowedToExecuteCallFor",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "isAllowedToExecuteCallFor",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506103bb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630ff51e991461004657806325d4a9be146100765780632d1fb389146100a6575b600080fd5b610060600480360381019061005b9190610276565b6100c2565b60405161006d91906102be565b60405180910390f35b610090600480360381019061008b91906102d9565b6100d5565b60405161009d91906102be565b60405180910390f35b6100c060048036038101906100bb9190610345565b6100e9565b005b60006100ce8233610180565b9050919050565b60006100e18383610180565b905092915050565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061024382610218565b9050919050565b61025381610238565b811461025e57600080fd5b50565b6000813590506102708161024a565b92915050565b60006020828403121561028c5761028b610213565b5b600061029a84828501610261565b91505092915050565b60008115159050919050565b6102b8816102a3565b82525050565b60006020820190506102d360008301846102af565b92915050565b600080604083850312156102f0576102ef610213565b5b60006102fe85828601610261565b925050602061030f85828601610261565b9150509250929050565b610322816102a3565b811461032d57600080fd5b50565b60008135905061033f81610319565b92915050565b6000806040838503121561035c5761035b610213565b5b600061036a85828601610261565b925050602061037b85828601610330565b915050925092905056fea2646970667358221220b3369ca7a61d048906ec88ea58c9644b43f80847b167aade1e88ad890650dbac64736f6c63430008100033";

type UserIdentityACLConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UserIdentityACLConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UserIdentityACL__factory extends ContractFactory {
  constructor(...args: UserIdentityACLConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UserIdentityACL> {
    return super.deploy(overrides || {}) as Promise<UserIdentityACL>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): UserIdentityACL {
    return super.attach(address) as UserIdentityACL;
  }
  override connect(signer: Signer): UserIdentityACL__factory {
    return super.connect(signer) as UserIdentityACL__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UserIdentityACLInterface {
    return new utils.Interface(_abi) as UserIdentityACLInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UserIdentityACL {
    return new Contract(address, _abi, signerOrProvider) as UserIdentityACL;
  }
}
