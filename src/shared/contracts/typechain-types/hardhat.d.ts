/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "ERC165Storage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Storage__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Authorization",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Authorization__factory>;
    getContractFactory(
      name: "IAuthorization",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuthorization__factory>;
    getContractFactory(
      name: "FeeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeManager__factory>;
    getContractFactory(
      name: "IFeeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeManager__factory>;
    getContractFactory(
      name: "ACME",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ACME__factory>;
    getContractFactory(
      name: "ERC677",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC677__factory>;
    getContractFactory(
      name: "RIFGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RIFGateway__factory>;
    getContractFactory(
      name: "BorrowService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BorrowService__factory>;
    getContractFactory(
      name: "IBorrowService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBorrowService__factory>;
    getContractFactory(
      name: "ILendingService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingService__factory>;
    getContractFactory(
      name: "IService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IService__factory>;
    getContractFactory(
      name: "LendingService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LendingService__factory>;
    getContractFactory(
      name: "Providers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Providers__factory>;
    getContractFactory(
      name: "Service",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Service__factory>;
    getContractFactory(
      name: "ServiceTypeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ServiceTypeManager__factory>;
    getContractFactory(
      name: "IForwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IForwarder__factory>;
    getContractFactory(
      name: "ISmartWalletFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISmartWalletFactory__factory>;
    getContractFactory(
      name: "SmartWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartWallet__factory>;
    getContractFactory(
      name: "SmartWalletFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SmartWalletFactory__factory>;
    getContractFactory(
      name: "IComptrollerG6",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IComptrollerG6__factory>;
    getContractFactory(
      name: "IPriceOracleProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracleProxy__factory>;
    getContractFactory(
      name: "TropykusBorrowingService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TropykusBorrowingService__factory>;
    getContractFactory(
      name: "TropykusLendingService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TropykusLendingService__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "ERC165Storage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Storage>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Authorization",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Authorization>;
    getContractAt(
      name: "IAuthorization",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuthorization>;
    getContractAt(
      name: "FeeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeManager>;
    getContractAt(
      name: "IFeeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeManager>;
    getContractAt(
      name: "ACME",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ACME>;
    getContractAt(
      name: "ERC677",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC677>;
    getContractAt(
      name: "RIFGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RIFGateway>;
    getContractAt(
      name: "BorrowService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BorrowService>;
    getContractAt(
      name: "IBorrowService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBorrowService>;
    getContractAt(
      name: "ILendingService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingService>;
    getContractAt(
      name: "IService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IService>;
    getContractAt(
      name: "LendingService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LendingService>;
    getContractAt(
      name: "Providers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Providers>;
    getContractAt(
      name: "Service",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Service>;
    getContractAt(
      name: "ServiceTypeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ServiceTypeManager>;
    getContractAt(
      name: "IForwarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IForwarder>;
    getContractAt(
      name: "ISmartWalletFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISmartWalletFactory>;
    getContractAt(
      name: "SmartWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartWallet>;
    getContractAt(
      name: "SmartWalletFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SmartWalletFactory>;
    getContractAt(
      name: "IComptrollerG6",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IComptrollerG6>;
    getContractAt(
      name: "IPriceOracleProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracleProxy>;
    getContractAt(
      name: "TropykusBorrowingService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TropykusBorrowingService>;
    getContractAt(
      name: "TropykusLendingService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TropykusLendingService>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
